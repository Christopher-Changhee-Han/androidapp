plot(rating~size, data = googleData, main = "Size")
boxplot(rating~installs, data = googleData, main = "Installs")
boxplot(rating~type, data = googleData, main = "Type")
plot(rating~price, data = googleData, main = "Price")
boxplot(rating~contentrating, data = googleData, main = "Content Rating")
plot(rating~lastupdated, data = googleData, main = "Last Updated")
plot(rating~androidver, data = googleData, main = "Android Ver.")
title("Predictors vs. Rating", outer=TRUE, line = -1)
par(mfrow=c(3,3), bg= "lightgrey")
boxplot(rating~category, data = googleData, main = "Category")
with(googleData[googleData$reviews < summary(googleData$reviews)[[5]],], plot(rating ~ reviews, main = "Reviews"))
plot(rating~size, data = googleData, main = "Size")
boxplot(rating~installs, data = googleData, main = "Installs")
boxplot(rating~type, data = googleData, main = "Type")
plot(rating~price, data = googleData, main = "Price")
boxplot(rating~contentrating, data = googleData, main = "Content Rating")
plot(rating~lastupdated, data = googleData, main = "Last Updated")
plot(rating~androidver, data = googleData, main = "Android Ver.")
title("Predictors vs. Rating", outer=TRUE, line = -1)
par(mfrow=c(3,3), cex.main = -2)
par(mfrow=c(3,3), oma = c(0,0,2,0)))
par(mfrow=c(3,3), oma = c(0,0,2,0))
boxplot(rating~category, data = googleData, main = "Category")
with(googleData[googleData$reviews < summary(googleData$reviews)[[5]],], plot(rating ~ reviews, main = "Reviews"))
plot(rating~size, data = googleData, main = "Size")
boxplot(rating~installs, data = googleData, main = "Installs")
boxplot(rating~type, data = googleData, main = "Type")
plot(rating~price, data = googleData, main = "Price")
boxplot(rating~contentrating, data = googleData, main = "Content Rating")
plot(rating~lastupdated, data = googleData, main = "Last Updated")
plot(rating~androidver, data = googleData, main = "Android Ver.")
title("Predictors vs. Rating", outer=TRUE, line = -1)
par(mfrow=c(3,3), oma = c(0,0,2,0))
boxplot(rating~category, data = googleData, main = "Category")
with(googleData[googleData$reviews < summary(googleData$reviews)[[5]],], plot(rating ~ reviews, main = "Reviews"))
plot(rating~size, data = googleData, main = "Size")
boxplot(rating~installs, data = googleData, main = "Installs")
boxplot(rating~type, data = googleData, main = "Type")
plot(rating~price, data = googleData, main = "Price")
boxplot(rating~contentrating, data = googleData, main = "Content Rating")
plot(rating~lastupdated, data = googleData, main = "Last Updated")
plot(rating~androidver, data = googleData, main = "Android Ver.")
title("Predictors vs. Rating", outer=TRUE, line = 0)
?title
par(mfrow=c(3,3), oma = c(0,0,2,0))
boxplot(rating~category, data = googleData, main = "Category")
with(googleData[googleData$reviews < summary(googleData$reviews)[[5]],], plot(rating ~ reviews, main = "Reviews"))
plot(rating~size, data = googleData, main = "Size")
boxplot(rating~installs, data = googleData, main = "Installs")
boxplot(rating~type, data = googleData, main = "Type")
plot(rating~price, data = googleData, main = "Price")
boxplot(rating~contentrating, data = googleData, main = "Content Rating")
plot(rating~lastupdated, data = googleData, main = "Last Updated")
plot(rating~androidver, data = googleData, main = "Android Ver.")
title("Predictors vs. Rating", outer=TRUE, cex.main = 2)
boxplot(rating~category, data = googleData, main = "Category", col= "darkgrey")
par(mfrow=c(3,3), oma = c(0,0,2,0))
boxplot(rating~category, data = googleData, main = "Category", col= "darkgrey")
with(googleData[googleData$reviews < summary(googleData$reviews)[[5]],], plot(rating ~ reviews, main = "Reviews"))
plot(rating~size, data = googleData, main = "Size")
boxplot(rating~installs, data = googleData, main = "Installs")
boxplot(rating~type, data = googleData, main = "Type")
plot(rating~price, data = googleData, main = "Price")
boxplot(rating~contentrating, data = googleData, main = "Content Rating")
plot(rating~lastupdated, data = googleData, main = "Last Updated")
plot(rating~androidver, data = googleData, main = "Android Ver.")
title("Predictors vs. Rating", outer=TRUE, cex.main = 2)
par(mfrow=c(3,3), oma = c(0,0,2,0), col= "darkgrey")
boxplot(rating~category, data = googleData, main = "Category")
with(googleData[googleData$reviews < summary(googleData$reviews)[[5]],], plot(rating ~ reviews, main = "Reviews"))
plot(rating~size, data = googleData, main = "Size")
boxplot(rating~installs, data = googleData, main = "Installs")
boxplot(rating~type, data = googleData, main = "Type")
plot(rating~price, data = googleData, main = "Price")
boxplot(rating~contentrating, data = googleData, main = "Content Rating")
plot(rating~lastupdated, data = googleData, main = "Last Updated")
plot(rating~androidver, data = googleData, main = "Android Ver.")
title("Predictors vs. Rating", outer=TRUE, cex.main = 2)
?par
par(mfrow=c(3,3), oma = c(0,0,2,0), col= "darkgrey", cex = 2)
boxplot(rating~category, data = googleData, main = "Category")
par(mfrow=c(3,3), oma = c(0,0,2,0), col= "darkgrey", cex = 1)
boxplot(rating~category, data = googleData, main = "Category")
par(mfrow=c(3,3), oma = c(0,0,2,0), col= "darkgrey", cex = 0.5)
boxplot(rating~category, data = googleData, main = "Category")
with(googleData[googleData$reviews < summary(googleData$reviews)[[5]],], plot(rating ~ reviews, main = "Reviews"))
plot(rating~size, data = googleData, main = "Size")
boxplot(rating~installs, data = googleData, main = "Installs")
boxplot(rating~type, data = googleData, main = "Type")
plot(rating~price, data = googleData, main = "Price")
boxplot(rating~contentrating, data = googleData, main = "Content Rating")
plot(rating~lastupdated, data = googleData, main = "Last Updated")
plot(rating~androidver, data = googleData, main = "Android Ver.")
title("Predictors vs. Rating", outer=TRUE, cex.main = 2)
par(mfrow=c(3,3), oma = c(0,0,2,0), col= "darkgrey", cex = 0.8)
boxplot(rating~category, data = googleData, main = "Category")
with(googleData[googleData$reviews < summary(googleData$reviews)[[5]],], plot(rating ~ reviews, main = "Reviews"))
plot(rating~size, data = googleData, main = "Size")
boxplot(rating~installs, data = googleData, main = "Installs")
boxplot(rating~type, data = googleData, main = "Type")
plot(rating~price, data = googleData, main = "Price")
boxplot(rating~contentrating, data = googleData, main = "Content Rating")
plot(rating~lastupdated, data = googleData, main = "Last Updated")
plot(rating~androidver, data = googleData, main = "Android Ver.")
title("Predictors vs. Rating", outer=TRUE, cex.main = 2)
par(mfrow=c(3,3), oma = c(0,0,2,0), col= "darkgrey", cex = 0.5)
boxplot(rating~category, data = googleData, main = "Category")
with(googleData[googleData$reviews < summary(googleData$reviews)[[5]],], plot(rating ~ reviews, main = "Reviews"))
plot(rating~size, data = googleData, main = "Size")
boxplot(rating~installs, data = googleData, main = "Installs")
boxplot(rating~type, data = googleData, main = "Type")
plot(rating~price, data = googleData, main = "Price")
boxplot(rating~contentrating, data = googleData, main = "Content Rating")
plot(rating~lastupdated, data = googleData, main = "Last Updated")
plot(rating~androidver, data = googleData, main = "Android Ver.")
title("Predictors vs. Rating", outer=TRUE, cex.main = 2)
#read in and clean the data to be ready for analysis
googleData <- read.csv("googleplaystore.csv",
stringsAsFactors = FALSE)
View(googleData)
head(googleData)
fullmodel <- lm(rating~ ., data = googleData)
googleData <- cleandata(googleData)
fullmodel <- lm(rating~ ., data = googleData)
#summary(fullmodel)
Anova(fullmodel, type = "III")
residualPlot(fullmodel)
fullmodel <- lm(rating~ ., data = googleData)
#summary(fullmodel)
Anova(fullmodel, type = "III")
residualPlot(fullmodel, main = "Residual vs. Fitted")
par(mfrow=c(2,3))
plot(rating~category, data = lessthanfour)
set.seed(201)
results <- setNames(c(0, 0), c("MSE", "c.v MSE"))
twothirds = sample(1:nrow(googleData), 2*(nrow(googleData)/3))
train <- googleData[twothirds,]
test <- googleData[-twothirds,]
lmdata <- lm(rating ~., data = train)
lm.pred = predict(lmdata, test, type = "response")
results[1] <- mean((test$rating- lm.pred)^2) #MSE
#what about cross validation error?
cv.error10=rep(0,5)
degree= 1:5
d=1
for(d in degree){
glm.fit=glm(rating~ ., data=googleData)
cv.error10[d]=cv.glm(googleData,glm.fit,K=10)$delta[1]
}
results[2] <- mean(cv.error10)
results
install.packages("gvlma")
library(gvlma)
gvlma(fullmodel)
gvlma::gvlma(fullmodel)
hist(googleData$rating)
hist(googleData$reviews)
hist(googleData$category)
hist(googleData$lastupdated)
hist(googleData$lastupdated, breaks = 100)
hist(googleData$lastupdated, breaks = 30)
hist(googleData$androidver)
par(mfrow=c(2,3))
hist(googleData$rating)
hist(googleData$reviews)
hist(googleData$size)
hist(googleData$lastupdated, breaks = 30)
hist(googleData$androidver)
hist(googleData$rating)
hist(googleData$rating, xlab = "Rating", main = "Frequency Distribution of Rating")
par(mfrow=c(2,2))
hist(googleData$reviews, xlab = "Reviews", main = "Reviews")
hist(googleData$size, xlab = "Size", main = "Size")
hist(googleData$lastupdated, breaks = 30, xlab = "Last Updated", main = "Last Updated")
hist(googleData$androidver, xlab = "Minimum Android Version", main = "Minimum Android Version")
title("Frequency Distribution of Quantitative Predictors")
par(mfrow=c(2,2))
hist(googleData$reviews, xlab = "Reviews", main = "Reviews")
hist(googleData$size, xlab = "Size", main = "Size")
hist(googleData$lastupdated, breaks = 30, xlab = "Last Updated", main = "Last Updated")
hist(googleData$androidver, xlab = "Minimum Android Version", main = "Minimum Android Version")
title("Frequency Distribution of Quantitative Predictors", outer= TRUE)
par(mfrow=c(2,2), oma= c(0,0,2,0))
hist(googleData$reviews, xlab = "Reviews", main = "Reviews")
hist(googleData$size, xlab = "Size", main = "Size")
hist(googleData$lastupdated, breaks = 30, xlab = "Last Updated", main = "Last Updated")
hist(googleData$androidver, xlab = "Minimum Android Version", main = "Minimum Android Version")
title("Frequency Distribution of Quantitative Predictors", outer= TRUE)
par(mfrow=c(2,2), oma= c(0,0,2,0), cex= 0.5)
hist(googleData$reviews, xlab = "Reviews", main = "Reviews")
hist(googleData$size, xlab = "Size", main = "Size")
hist(googleData$lastupdated, breaks = 30, xlab = "Last Updated", main = "Last Updated")
hist(googleData$androidver, xlab = "Minimum Android Version", main = "Minimum Android Version")
title("Frequency Distribution of Quantitative Predictors", outer= TRUE)
par(mfrow=c(2,2), oma= c(0,0,2,0), cex= 0.8)
hist(googleData$reviews, xlab = "Reviews", main = "Reviews")
hist(googleData$size, xlab = "Size", main = "Size")
hist(googleData$lastupdated, breaks = 30, xlab = "Last Updated", main = "Last Updated")
hist(googleData$androidver, xlab = "Minimum Android Version", main = "Minimum Android Version")
title("Frequency Distribution of Quantitative Predictors", outer= TRUE)
par(mfrow=c(2,2), oma= c(0,0,2,0))
hist(googleData$reviews, xlab = "Reviews", main = "Reviews")
hist(googleData$size, xlab = "Size", main = "Size")
hist(googleData$lastupdated, breaks = 30, xlab = "Last Updated", main = "Last Updated")
hist(googleData$androidver, xlab = "Minimum Android Version", main = "Minimum Android Version")
title("Frequency Distribution of Quantitative Predictors", outer= TRUE, cex.main = 2)
par(mfrow=c(2,2), oma= c(0,0,2,0))
hist(googleData$reviews, xlab = "Reviews", main = "Reviews")
hist(googleData$size, xlab = "Size", main = "Size")
hist(googleData$lastupdated, breaks = 30, xlab = "Last Updated", main = "Last Updated")
hist(googleData$androidver, xlab = "Minimum Android Version", main = "Minimum Android Version")
title("Frequency Distribution of Quantitative Predictors", outer= TRUE, cex.main = 1)
par(mfrow=c(2,2), oma= c(0,0,2,0))
hist(googleData$reviews, xlab = "Reviews", main = "Reviews")
hist(googleData$size, xlab = "Size", main = "Size")
hist(googleData$lastupdated, breaks = 30, xlab = "Last Updated", main = "Last Updated")
hist(googleData$androidver, xlab = "Minimum Android Version", main = "Minimum Android Version")
title("Frequency Distribution of Quantitative Predictors", outer= TRUE, cex.main = 1.5)
par(mfrow=c(2,2), oma= c(0,0,2,0))
hist(googleData$reviews, xlab = "Reviews", main = "Reviews")
hist(googleData$size, xlab = "Size", main = "Size")
hist(googleData$lastupdated, breaks = 30, xlab = "Last Updated", main = "Last Updated")
hist(googleData$androidver, xlab = "Minimum Android Version", main = "Minimum Android Version")
title("Frequency Distribution of Quantitative Predictors", outer= TRUE, cex.main = 1.5)
View(fullmodel)
#summary(fullmodel)
Anova(fullmodel, type = "III")
lmreview <- lm(rating~ reviews, data = googleData[googleData$reviews < summary(googleData$reviews)[[5]],])
summary(lmreview)
summary(lm(reviews~ installs, data= googleData))
Anova(lm(reviews~ installs, data= googleData), type = "III")
summary(lm(reviews~ installs, data= googleData))
plot(reviews~ installs, data = googleData)
onlypaid <- googleData[googleData$price != 0,]
dim(onlypaid)
604/8195
onlypaid <- onlypaid[onlypaid$price > 0,]
plot(rating~ price, data = onlypaid, col= "darkgrey", main = "Price vs. Rating (polynomial)")
onlypaid <- onlypaid[onlypaid$price > 0 & onlypaid$price < 100,]
plot(rating~ price, data = onlypaid, col= "darkgrey", main = "Price vs. Rating (polynomial)")
plot(rating~ price, data = onlypaid, col= "darkgrey", main = "Price vs. Rating (polynomial)")
lmonlypaid <- lm(rating~ price, data = onlypaid)
abline(lmonlypaid)
quadonlypaid <- lm(rating~ poly(price, 2, raw = TRUE), data = onlypaid)
abline(quadonlypaid, col= "blue")
cubiconlypaid <- lm(rating~ poly(price, 3, raw = TRUE), data = onlypaid)
abline(cubiconlypaid, col= "red")
highdegreeonlypaid <- lm(rating~ poly(price, 10, raw = TRUE), data = onlypaid)
abline(highdegreeonlypaid, col= "green") #similar to linear
#add legend
plot(rating~ price, data = onlypaid, col= "darkgrey", main = "Price vs. Rating (polynomial)")
lmonlypaid <- lm(rating~ price, data = onlypaid)
abline(lmonlypaid)
quadonlypaid <- lm(rating~ poly(price, 2, raw = TRUE), data = onlypaid)
abline(quadonlypaid, col= "blue")
cubiconlypaid <- lm(rating~ poly(price, 3, raw = TRUE), data = onlypaid)
abline(cubiconlypaid, col= "red")
highdegreeonlypaid <- lm(rating~ poly(price, 10, raw = TRUE), data = onlypaid)
abline(highdegreeonlypaid, col= "green") #similar to linear
#add legend
?legend
legend("bottomright")
legend("bottomright", legend= c("linear", "quadratic", "cubic", "10th degree"))
plot(rating~ price, data = onlypaid, col= "darkgrey", main = "Price vs. Rating (polynomial)")
lmonlypaid <- lm(rating~ price, data = onlypaid)
abline(lmonlypaid)
quadonlypaid <- lm(rating~ poly(price, 2, raw = TRUE), data = onlypaid)
abline(quadonlypaid, col= "blue")
cubiconlypaid <- lm(rating~ poly(price, 3, raw = TRUE), data = onlypaid)
abline(cubiconlypaid, col= "red")
highdegreeonlypaid <- lm(rating~ poly(price, 10, raw = TRUE), data = onlypaid)
abline(highdegreeonlypaid, col= "green")
legend("bottomright", legend= c("linear", "quadratic", "cubic", "10th degree"))
legend("bottomright", legend= c("linear", "quadratic", "cubic", "10th degree"), col= c("black", "blue", "red", "green"))
plot(rating~ price, data = onlypaid, col= "darkgrey", main = "Price vs. Rating (polynomial)")
lmonlypaid <- lm(rating~ price, data = onlypaid)
abline(lmonlypaid)
quadonlypaid <- lm(rating~ poly(price, 2, raw = TRUE), data = onlypaid)
abline(quadonlypaid, col= "blue")
cubiconlypaid <- lm(rating~ poly(price, 3, raw = TRUE), data = onlypaid)
abline(cubiconlypaid, col= "red")
highdegreeonlypaid <- lm(rating~ poly(price, 10, raw = TRUE), data = onlypaid)
abline(highdegreeonlypaid, col= "green")
legend("bottomright", legend= c("linear", "quadratic", "cubic", "10th degree"), col= c("black", "blue", "red", "green"))
plot(rating~ price, data = onlypaid, col= "darkgrey", main = "Price vs. Rating (polynomial)")
lmonlypaid <- lm(rating~ price, data = onlypaid)
abline(lmonlypaid)
quadonlypaid <- lm(rating~ poly(price, 2, raw = TRUE), data = onlypaid)
abline(quadonlypaid, col= "blue")
cubiconlypaid <- lm(rating~ poly(price, 3, raw = TRUE), data = onlypaid)
abline(cubiconlypaid, col= "red")
highdegreeonlypaid <- lm(rating~ poly(price, 10, raw = TRUE), data = onlypaid)
abline(highdegreeonlypaid, col= "green")
legend("bottomright", legend= c("linear", "quadratic", "cubic", "10th degree"), col= c("black", "blue", "red", "green"), lty= 2)
plot(rating~ price, data = onlypaid, col= "darkgrey", main = "Price vs. Rating (polynomial)")
lmonlypaid <- lm(rating~ price, data = onlypaid)
abline(lmonlypaid)
quadonlypaid <- lm(rating~ poly(price, 2, raw = TRUE), data = onlypaid)
abline(quadonlypaid, col= "blue")
cubiconlypaid <- lm(rating~ poly(price, 3, raw = TRUE), data = onlypaid)
abline(cubiconlypaid, col= "red")
highdegreeonlypaid <- lm(rating~ poly(price, 10, raw = TRUE), data = onlypaid)
abline(highdegreeonlypaid, col= "green")
legend("bottomright", legend= c("linear", "quadratic", "cubic", "10th degree"), col= c("black", "blue", "red", "green"), lty= 1)
anova(lmonlypaid, quadonlypaid, cubiconlypaid, highdegreeonlypaid)
fit=lm(rating~bs(price, knots=c(10,20,30)),data=onlypaid)
plot(rating ~ price,col="darkgrey", data= onlypaid, main = "Price vs. Rating (Spline, Local Regression)")
lines(onlypaid$price,predict(fit,list(price = onlypaid$price)),col="darkgreen",lwd=2)
abline(v=c(10,20,30),lty=2,col="darkgreen")
fitsmooth=smooth.spline(onlypaid$rating,onlypaid$price, cv =TRUE)
lines(fitsmooth,col="red",lwd=2)
fit=loess(rating~price,span=.5,data=onlypaid)
lines(onlypaid$price, predict(fit, onlypaid$price),col="red",lwd=2)
#add a legend
fit=lm(rating~bs(price, knots=c(1, 5, 40)),data=onlypaid)
plot(rating ~ price,col="darkgrey", data= onlypaid, main = "Price vs. Rating (Spline, Local Regression)")
lines(onlypaid$price,predict(fit,list(price = onlypaid$price)),col="darkgreen",lwd=2)
abline(v=c(1,5,40),lty=2,col="darkgreen")
fitsmooth=smooth.spline(onlypaid$rating,onlypaid$price, cv =TRUE)
lines(fitsmooth,col="red",lwd=2)
fit=loess(rating~price,span=.5,data=onlypaid)
lines(onlypaid$price, predict(fit, onlypaid$price),col="red",lwd=2)
#add a legend
fit=lm(rating~bs(price, knots=c(3, 10, 40)),data=onlypaid)
plot(rating ~ price,col="darkgrey", data= onlypaid, main = "Price vs. Rating (Spline, Local Regression)")
lines(onlypaid$price,predict(fit,list(price = onlypaid$price)),col="darkgreen",lwd=2)
abline(v=c(3,10,40),lty=2,col="darkgreen")
fitsmooth=smooth.spline(onlypaid$rating,onlypaid$price, cv =TRUE)
lines(fitsmooth,col="red",lwd=2)
fit=loess(rating~price,span=.5,data=onlypaid)
lines(onlypaid$price, predict(fit, onlypaid$price),col="red",lwd=2)
#add a legend
fit=lm(rating~bs(price, knots=c(3, 10, 40)),data=onlypaid)
plot(rating ~ price,col="darkgrey", data= onlypaid, main = "Price vs. Rating (Spline, Local Regression)")
lines(onlypaid$price,predict(fit,list(price = onlypaid$price)),col="darkgreen",lwd=2)
abline(v=c(3,10,40),lty=2,col="darkgreen")
fitsmooth=smooth.spline(onlypaid$rating,onlypaid$price, cv =TRUE)
lines(fitsmooth,col="blue",lwd=2)
fit=loess(rating~price,span=.5,data=onlypaid)
lines(onlypaid$price, predict(fit, onlypaid$price),col="red",lwd=2)
#add a legend
fit=lm(rating~bs(price, knots=c(3, 10, 40)),data=onlypaid)
plot(rating ~ price,col="darkgrey", data= onlypaid, main = "Price vs. Rating (Spline, Local Regression)")
lines(onlypaid$price,predict(fit,list(price = onlypaid$price)),col="darkgreen",lwd=2)
abline(v=c(3,10,40),lty=2,col="darkgreen")
fitsmooth=smooth.spline(onlypaid$rating,onlypaid$price, cv =TRUE)
lines(fitsmooth,col="blue",lwd=2)
fit=loess(rating~price,span=.5,data=onlypaid)
lines(onlypaid$price, predict(fit, onlypaid$price),col="red",lwd=2)
legend("bottomright", legend = c("Cubic Spline", "C.V Smoothing Spline", "Local Regression", lty= 1, col= c("darkgreen", "blue", "red")))
legend("bottomright", legend = c("Cubic Spline", "C.V Smoothing Spline", "Local Regression", lty= 1, col= c("darkgreen", "blue", "red"), cex = 0.5))
fit=lm(rating~bs(price, knots=c(3, 10, 40)),data=onlypaid)
plot(rating ~ price,col="darkgrey", data= onlypaid, main = "Price vs. Rating (Spline, Local Regression)")
lines(onlypaid$price,predict(fit,list(price = onlypaid$price)),col="darkgreen",lwd=2)
abline(v=c(3,10,40),lty=2,col="darkgreen")
fitsmooth=smooth.spline(onlypaid$rating,onlypaid$price, cv =TRUE)
lines(fitsmooth,col="blue",lwd=2)
fit=loess(rating~price,span=.5,data=onlypaid)
lines(onlypaid$price, predict(fit, onlypaid$price),col="red",lwd=2)
legend("bottomright", legend = c("Cubic Spline", "C.V Smoothing Spline", "Local Regression", lty= 1, col= c("darkgreen", "blue", "red"), cex = 0.5))
fit=lm(rating~bs(price, knots=c(3, 10, 40)),data=onlypaid)
plot(rating ~ price,col="darkgrey", data= onlypaid, main = "Price vs. Rating (Spline, Local Regression)")
lines(onlypaid$price,predict(fit,list(price = onlypaid$price)),col="darkgreen",lwd=2)
abline(v=c(3,10,40),lty=2,col="darkgreen")
fitsmooth=smooth.spline(onlypaid$rating,onlypaid$price, cv =TRUE)
lines(fitsmooth,col="blue",lwd=2)
fit=loess(rating~price,span=.5,data=onlypaid)
lines(onlypaid$price, predict(fit, onlypaid$price),col="red",lwd=2)
legend("bottomright", legend = c("Cubic Spline", "C.V Smoothing Spline", "Local Regression", lty= 1, col= c("darkgreen", "blue", "red"), cex = 0.1))
fit=lm(rating~bs(price, knots=c(3, 10, 40)),data=onlypaid)
plot(rating ~ price,col="darkgrey", data= onlypaid, main = "Price vs. Rating (Spline, Local Regression)")
lines(onlypaid$price,predict(fit,list(price = onlypaid$price)),col="darkgreen",lwd=2)
abline(v=c(3,10,40),lty=2,col="darkgreen")
fitsmooth=smooth.spline(onlypaid$rating,onlypaid$price, cv =TRUE)
lines(fitsmooth,col="blue",lwd=2)
fit=loess(rating~price,span=.5,data=onlypaid)
lines(onlypaid$price, predict(fit, onlypaid$price),col="red",lwd=2)
legend("bottomright", legend = c("Cubic Spline", "C.V Smoothing Spline", "Local Regression"), col= c("darkgreen", "blue", "red"), lty= 1)
summary(lm(price~ type, data= googleData))
Anova(lm(price~ type, data= googleData), type = "III")
plot(price~ type, data= googleData)
summary(lm(price~ type, data= googleData))
Anova(lm(price~ type, data= googleData), type = "III")
#summary(noreviews)
anova(fullmodel, noreviews)
noreviews <- lm(rating~. -reviews, data = googleData)
#summary(noreviews)
anova(fullmodel, noreviews)
noinstalls <-lm(rating~. -installs, data = googleData)
#summary(noinstalls)
anova(fullmodel, noinstalls)
updatedmodel <- lm(rating~. - price - reviews, data = googleData)
summary(updatedmodel)
summary(updatedmodel)
Anova(updatedmodel, type = "III")
Anova(updatedmodel, type = "III")
summary(updatedmodel)
View(updatedmodel)
summary(updatedmodel)$r.squared
updatedmodel2 <- lm(rating~. - price - reviews - size - contentrating, data = googleData)
summary(updatedmodel2)$r.squared
Anova(updatedmodel2)
Anova(updatedmodel, type = "III")
updatedmodel2 <- lm(rating~. - price - reviews - size - contentrating, data = googleData)
summary(updatedmodel2)$r.squared
Anova(updatedmodel2)
r.squared
summary(updatedmodel)$r.squared
summary(updatedmodel2)$r.squared
anova(fullmodel, updatedmodel, updatedmodel2)
updatedmodel2 <- lm(rating~. - price - reviews - size - contentrating - androidver, data = googleData)
summary(updatedmodel2)$r.squared
Anova(updatedmodel2)
Anova(updatedmodel2)
anova(fullmodel, updatedmodel, updatedmodel2)
#calculate the test error
#use 2/3 data for training data, 1/3 for test
set.seed(201)
twothirds2 = sample(1:nrow(newData), 6244)
newData <- select(googleData, c("category", "rating", "installs", "type", "lastupdated", "androidver"))
#calculate the test error
#use 2/3 data for training data, 1/3 for test
set.seed(201)
twothirds2 = sample(1:nrow(newData), 6244)
train2 <- newData[twothirds,]
test2 <- newData[-twothirds,]
lmgoogle2 <- lm(rating~ ., data = train2)
lm.pred2 = predict(lmgoogle2, test2, type = "response")
mean((test2$rating - lm.pred2)^2) #0.261 essentially same
#what about cross validation error?
cv.error10=rep(0,5)
degree= 1:5
d =1
for(d in degree){
glm.fit=glm(rating~., data=newData)
cv.error10[d]=cv.glm(newData,glm.fit,K=10)$delta[1]
} ##0.242 essentially same, removing those variables has no significant effect so we are good
#calculate the test error
#use 2/3 data for training data, 1/3 for test
set.seed(201)
twothirds2 = sample(1:nrow(newData), 2*(nrow(newData)/3))
train2 <- newData[twothirds,]
test2 <- newData[-twothirds,]
lmgoogle2 <- lm(rating~ ., data = train2)
lm.pred2 = predict(lmgoogle2, test2, type = "response")
mean((test2$rating - lm.pred2)^2) #0.261 essentially same
#what about cross validation error?
cv.error10=rep(0,5)
degree= 1:5
d =1
for(d in degree){
glm.fit=glm(rating~., data=newData)
cv.error10[d]=cv.glm(newData,glm.fit,K=10)$delta[1]
} ##0.242 essentially same, removing those variables has no significant effect so we are good
#calculate the test error
#use 2/3 data for training data, 1/3 for test
set.seed(201)
twothirds2 = sample(1:nrow(newData), 2*(nrow(newData)/3))
train2 <- newData[twothirds,]
test2 <- newData[-twothirds,]
lmgoogle2 <- lm(rating~ ., data = train2)
lm.pred2 = predict(lmgoogle2, test2, type = "response")
results[1] <- mean((test2$rating - lm.pred2)^2)
#what about cross validation error?
cv.error10=rep(0,5)
degree= 1:5
d =1
for(d in degree){
glm.fit=glm(rating~., data=newData)
cv.error10[d]=cv.glm(newData,glm.fit,K=10)$delta[1]
}
results[2] <- mean(cv.error10)
results
hist(sqrt(newData$rating), breaks = 100)
hist(log(newData$rating), breaks = 100)
```{r}
par(mfrow=c(2,2))
hist(newData$rating, breaks = 100) #oh crap, it's left skewed
hist((newData$rating)^2, breaks = 100) #squaring it doesn't make too much difference
hist(log(newData$rating), breaks = 100) #log doesn't change it either
boxplot(newData$rating)
summary(newData$rating) #25% of the data is 1-4, 75% of the data is 4.0 - 5.0
par(mfrow=c(2,3))
plot(rating~category, data = lessthanfour)
par(mfrow=c(2,2))
hist(newData$rating, main = "Frequency Distribution of rating") #oh crap, it's left skewed
hist((newData$rating)^2, breaks = 100) #squaring it doesn't make too much difference
hist(log(newData$rating), breaks = 100) #log doesn't change it either
boxplot(newData$rating)
summary(newData$rating) #25% of the data is 1-4, 75% of the data is 4.0 - 5.0
par(mfrow=c(2,2))
hist(newData$rating, breaks = 50, main = "Frequency Distribution of rating") #oh crap, it's left skewed
hist((newData$rating)^2, breaks = 50) #squaring it doesn't make too much difference
hist(log(newData$rating), breaks = 50) #log doesn't change it either
boxplot(newData$rating)
summary(newData$rating) #25% of the data is 1-4, 75% of the data is 4.0 - 5.0
par(mfrow=c(2,2))
hist(newData$rating, breaks = 50, main = "Frequency Distribution of Rating", xlab = "Rating") #oh crap, it's left skewed
hist((newData$rating)^2, breaks = 50, main = "Frequency Distribution of Rating^2", xlab = "Rating^2") #squaring it doesn't make too much difference
hist(log(newData$rating), breaks = 50, main = "Frequency Distribution of log(Rating)", xlab = "log(Rating)") #log doesn't change it either
boxplot(newData$rating, main = "Distribution of Rating")
summary(newData$rating) #25% of the data is 1-4, 75% of the data is 4.0 - 5.0
par(mfrow=c(2,1))
hist(lowrating$rating)
lowrating <- filter(newData, rating < 4)
highrating <- filter(newData, rating >=4)
par(mfrow=c(2,1))
hist(lowrating$rating)
hist(highrating$rating)
par(mfrow=c(2,1))
hist(lowrating$rating, xlab= "Rating", main = "Low Rating")
hist(highrating$rating, xlab= "Rating", main = "High Rating")
